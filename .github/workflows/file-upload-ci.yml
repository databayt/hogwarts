# File Upload System CI/CD Pipeline
# Production-ready workflow for file upload feature deployment

name: File Upload CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/components/file-upload/**'
      - 'src/app/**/upload/**'
      - 'src/lib/storage/**'
      - 'src/lib/upload/**'
      - 'infrastructure/terraform/**'
      - '.github/workflows/file-upload-ci.yml'
  pull_request:
    branches: [main]
    paths:
      - 'src/components/file-upload/**'
      - 'src/app/**/upload/**'
      - 'src/lib/storage/**'
      - 'src/lib/upload/**'

env:
  NODE_VERSION: '20.x'
  PNPM_VERSION: '9.x'
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

jobs:
  # Job 1: Code Quality & Security Scanning
  quality-security:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run TypeScript checks
        run: pnpm tsc --noEmit

      - name: Run ESLint
        run: pnpm lint src/components/file-upload src/lib/storage src/lib/upload

      - name: Run Prettier check
        run: pnpm prettier --check "src/**/*.{ts,tsx,json,md}"

      - name: Security audit
        run: pnpm audit --audit-level=moderate

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          path: '.'
          format: 'HTML'
          args: >
            --enableRetired
            --enableExperimental

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: reports/

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Job 2: Unit & Integration Tests
  test-upload-system:
    name: Test Upload System
    runs-on: ubuntu-latest
    strategy:
      matrix:
        shard: [1, 2, 3, 4]
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: hogwarts_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup test database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/hogwarts_test
        run: |
          pnpm prisma generate
          pnpm prisma migrate deploy
          pnpm prisma db seed

      - name: Run unit tests (shard ${{ matrix.shard }})
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/hogwarts_test
          REDIS_URL: redis://localhost:6379
          SHARD: ${{ matrix.shard }}
          TOTAL_SHARDS: 4
        run: |
          pnpm test:unit --shard=${{ matrix.shard }}/4 \
            src/components/file-upload \
            src/lib/storage \
            src/lib/upload

      - name: Run integration tests
        if: matrix.shard == 1
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/hogwarts_test
          REDIS_URL: redis://localhost:6379
          VERCEL_BLOB_TOKEN: ${{ secrets.VERCEL_BLOB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          CLOUDFLARE_R2_ACCESS_KEY: ${{ secrets.CLOUDFLARE_R2_ACCESS_KEY }}
          CLOUDFLARE_R2_SECRET_KEY: ${{ secrets.CLOUDFLARE_R2_SECRET_KEY }}
        run: pnpm test:integration

      - name: Upload test coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unittests-shard-${{ matrix.shard }}

  # Job 3: Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run upload performance tests
        run: |
          k6 run tests/performance/file-upload.js \
            --out cloud \
            --out json=performance-results.json

      - name: Analyze performance results
        run: node scripts/analyze-performance.js performance-results.json

      - name: Comment PR with results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('performance-summary.json', 'utf8'));

            const comment = `## 📊 Performance Test Results

            | Metric | Value | Threshold | Status |
            |--------|-------|-----------|--------|
            | Avg Upload Time (1MB) | ${results.avgUpload1MB}ms | <2000ms | ${results.avgUpload1MB < 2000 ? '✅' : '❌'} |
            | Avg Upload Time (100MB) | ${results.avgUpload100MB}ms | <30000ms | ${results.avgUpload100MB < 30000 ? '✅' : '❌'} |
            | P95 Response Time | ${results.p95}ms | <5000ms | ${results.p95 < 5000 ? '✅' : '❌'} |
            | Error Rate | ${results.errorRate}% | <1% | ${results.errorRate < 1 ? '✅' : '❌'} |
            | Concurrent Uploads | ${results.concurrent} | >50 | ${results.concurrent > 50 ? '✅' : '❌'} |
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Job 4: Security Scanning for Uploaded Files
  malware-scan-test:
    name: Malware Scanning Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup ClamAV
        run: |
          sudo apt-get update
          sudo apt-get install -y clamav clamav-daemon
          sudo freshclam
          sudo systemctl start clamav-daemon

      - name: Test malware scanning
        run: |
          # Create test files
          echo "X5O!P%@AP[4\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*" > test-malware.txt
          echo "Clean file content" > test-clean.txt

          # Test scanning
          clamscan test-clean.txt
          ! clamscan test-malware.txt

      - name: Verify scanning integration
        run: pnpm test tests/security/malware-scan.test.ts

  # Job 5: E2E Tests
  e2e-tests:
    name: E2E Upload Tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm playwright install --with-deps chromium

      - name: Build application
        env:
          SKIP_ENV_VALIDATION: true
        run: pnpm build

      - name: Run E2E tests
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          E2E_TEST: true
        run: pnpm test:e2e:upload

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/

  # Job 6: Build & Deploy to Vercel
  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [quality-security, test-upload-system, e2e-tests]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://ed.databayt.org
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Vercel CLI
        run: npm i -g vercel@latest

      - name: Pull Vercel Environment
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel
        id: deploy
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT

      - name: Run smoke tests
        run: |
          pnpm test:smoke ${{ steps.deploy.outputs.deployment_url }}

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          text: |
            Deployment ${{ job.status }}
            URL: ${{ steps.deploy.outputs.deployment_url }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Job 7: Infrastructure Deployment
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [deploy]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Init
        working-directory: ./infrastructure/terraform
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=hogwarts/file-upload/terraform.tfstate" \
            -backend-config="region=us-east-1"

      - name: Terraform Plan
        working-directory: ./infrastructure/terraform
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: ./infrastructure/terraform
        if: github.ref == 'refs/heads/main'
        run: terraform apply tfplan

      - name: Output Infrastructure Details
        working-directory: ./infrastructure/terraform
        run: |
          terraform output -json > infrastructure-output.json
          echo "Infrastructure deployed successfully"

  # Job 8: Post-Deployment Validation
  validate-deployment:
    name: Validate Deployment
    runs-on: ubuntu-latest
    needs: [deploy, deploy-infrastructure]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Health checks
        run: |
          # Check main application
          curl -f https://ed.databayt.org/api/health || exit 1

          # Check upload endpoints
          curl -f https://ed.databayt.org/api/upload/health || exit 1

          # Check CDN
          curl -f https://cdn.databayt.org/health || exit 1

      - name: Run synthetic monitoring
        run: |
          pnpm dlx @datadog/synthetics-ci-orb@latest \
            --apiKey ${{ secrets.DATADOG_API_KEY }} \
            --appKey ${{ secrets.DATADOG_APP_KEY }} \
            --config synthetics.config.json

      - name: Verify storage providers
        env:
          VERCEL_BLOB_TOKEN: ${{ secrets.VERCEL_BLOB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          node scripts/verify-storage-providers.js

      - name: Create deployment record
        run: |
          curl -X POST https://api.databayt.org/deployments \
            -H "Authorization: Bearer ${{ secrets.API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "version": "${{ github.sha }}",
              "environment": "production",
              "service": "file-upload",
              "status": "success",
              "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
            }'