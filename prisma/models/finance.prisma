// ============================================
// FINANCE MODULE - Comprehensive Financial Management
// ============================================
// This file consolidates all finance-related models including:
// - Core Accounting (Double-Entry Bookkeeping)
// - Invoice Management (from invoice.prisma)
// - Receipt Tracking (from receipt.prisma)
// - Banking Integration (from banking.prisma)
// - Fee Management (from fees.prisma)
// - Salary & Payroll
// - Timesheet & Attendance
// - Wallet & Ledger
// - Budget & Expenses
// - Financial Reports

// ============================================
// CORE ACCOUNTING SYSTEM (Double-Entry Bookkeeping)
// ============================================

enum AccountType {
  ASSET      // Bank accounts, cash, receivables, inventory
  LIABILITY  // Payables, loans, deferred revenue
  EQUITY     // Capital, retained earnings
  REVENUE    // Income from fees, services
  EXPENSE    // Operating costs, salaries, utilities
}

enum BalanceType {
  DEBIT
  CREDIT
}

// Chart of Accounts - Account hierarchy
model ChartOfAccount {
  id            String      @id @default(cuid())
  schoolId      String
  code          String // e.g., "1000", "2100"
  name          String // e.g., "Cash", "Accounts Payable"
  type          AccountType
  subtype       String? // e.g., "Current Asset", "Fixed Asset"
  parentId      String?
  normalBalance BalanceType // DEBIT or CREDIT
  isActive      Boolean     @default(true)
  description   String?     @db.Text
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  school         School           @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  parent         ChartOfAccount?  @relation("AccountHierarchy", fields: [parentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  children       ChartOfAccount[] @relation("AccountHierarchy")
  ledgerEntries  LedgerEntry[]
  balances       AccountBalance[]
  expenseCategories ExpenseCategory[]

  @@unique([schoolId, code])
  @@index([schoolId, type])
  @@index([schoolId, isActive])
}

// Fiscal Year Configuration
model FiscalYear {
  id        String    @id @default(cuid())
  schoolId  String
  name      String // "FY 2024-2025"
  startDate DateTime
  endDate   DateTime
  isCurrent Boolean   @default(false)
  isClosed  Boolean   @default(false)
  closedAt  DateTime?
  closedBy  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  school          School            @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  journalEntries  JournalEntry[]
  budgets         Budget[]
  financialReports FinancialReport[]

  @@unique([schoolId, name])
  @@index([schoolId, isCurrent])
}

// Journal Entry - Transaction header (immutable once posted)
model JournalEntry {
  id              String    @id @default(cuid())
  schoolId        String
  entryNumber     String    @unique
  entryDate       DateTime
  description     String    @db.Text
  reference       String? // Invoice #, Payment #, etc.
  sourceModule    String // "fees", "payroll", "expenses", "invoice", etc.
  sourceRecordId  String? // ID from source module
  isPosted        Boolean   @default(false)
  postedAt        DateTime?
  postedBy        String?
  isReversed      Boolean   @default(false)
  reversedAt      DateTime?
  reversalEntryId String?
  fiscalYearId    String
  createdBy       String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  school        School        @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  fiscalYear    FiscalYear    @relation(fields: [fiscalYearId], references: [id])
  ledgerEntries LedgerEntry[]
  reversalEntry JournalEntry? @relation("JournalReversal", fields: [reversalEntryId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  reversedBy    JournalEntry[] @relation("JournalReversal")

  // Relations to source modules
  userInvoices  UserInvoice[]
  payments      Payment[]
  payrollRuns   PayrollRun[]
  expenses      Expense[]
  walletTransactions WalletTransaction[]

  @@index([schoolId, entryDate])
  @@index([schoolId, fiscalYearId])
  @@index([schoolId, sourceModule, sourceRecordId])
  @@index([schoolId, isPosted])
}

// Ledger Entry - Individual debit/credit lines (immutable)
model LedgerEntry {
  id             String   @id @default(cuid())
  schoolId       String
  journalEntryId String
  accountId      String
  debit          Decimal  @default(0) @db.Decimal(12, 2)
  credit         Decimal  @default(0) @db.Decimal(12, 2)
  description    String?  @db.Text
  createdAt      DateTime @default(now())

  school       School         @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  journalEntry JournalEntry   @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)
  account      ChartOfAccount @relation(fields: [accountId], references: [id])

  @@index([schoolId, journalEntryId])
  @@index([schoolId, accountId])
}

// Account Balance - Real-time balances (updated via triggers/jobs)
model AccountBalance {
  id        String   @id @default(cuid())
  schoolId  String
  accountId String
  balance   Decimal  @db.Decimal(12, 2)
  asOfDate  DateTime
  createdAt DateTime @default(now())

  school  School         @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  account ChartOfAccount @relation(fields: [accountId], references: [id])

  @@unique([schoolId, accountId, asOfDate])
  @@index([schoolId, asOfDate])
}

// ============================================
// INVOICE SUB-BLOCK (Migrated from invoice.prisma)
// ============================================

enum InvoiceStatus {
  PAID
  UNPAID
  OVERDUE
  CANCELLED
}

model UserInvoice {
  id             String       @id @default(cuid())
  invoice_no     String
  invoice_date   DateTime
  due_date       DateTime
  currency       String       @default("USD")
  from           UserInvoiceAddress @relation("FromAddress", fields: [fromAddressId], references: [id])
  fromAddressId  String       @unique
  to             UserInvoiceAddress @relation("ToAddress", fields: [toAddressId], references: [id])
  toAddressId    String       @unique
  items          UserInvoiceItem[]
  sub_total      Float
  discount       Float?
  tax_percentage Float?
  total          Float
  notes          String?      @db.Text
  status         InvoiceStatus @default(UNPAID)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  schoolId       String
  school         School       @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  // Accounting integration
  journalEntryId String?
  journalEntry   JournalEntry? @relation(fields: [journalEntryId], references: [id])

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([schoolId, invoice_no])
  @@index([userId])
  @@index([schoolId])
  @@index([status])
}

model UserInvoiceItem {
  id        String      @id @default(cuid())
  item_name String
  quantity  Int
  price     Float
  total     Float
  invoiceId String
  invoice   UserInvoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  schoolId  String
  school    School      @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([invoiceId])
  @@index([schoolId])
}

model UserInvoiceAddress {
  id          String       @id @default(cuid())
  name        String
  email       String?
  address1    String
  address2    String?
  address3    String?
  fromInvoice UserInvoice? @relation("FromAddress")
  toInvoice   UserInvoice? @relation("ToAddress")
  schoolId    String
  school      School       @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([schoolId])
}

model UserInvoiceSettings {
  id          String                @id @default(cuid())
  invoiceLogo String?
  signature   UserInvoiceSignature?
  userId      String                @unique
  user        User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  schoolId    String
  school      School                @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt

  @@index([schoolId])
}

model UserInvoiceSignature {
  id         String              @id @default(cuid())
  name       String?
  image      String?
  settingsId String              @unique
  settings   UserInvoiceSettings @relation(fields: [settingsId], references: [id], onDelete: Cascade)
  schoolId   String
  school     School              @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@index([schoolId])
}

// Invoice payment receipt model (for billing/subscription module)
// This is separate from ExpenseReceipt which tracks expense receipts with OCR
model Receipt {
  id         String    @id @default(cuid())
  invoiceId  String
  fileName   String
  fileUrl    String
  amount     Int
  status     String    @default("pending") // pending, approved, rejected
  notes      String?   @db.Text
  reviewedAt DateTime?

  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([invoiceId])
  @@index([status])
}

// ============================================
// RECEIPT SUB-BLOCK (Migrated from receipt.prisma)
// ============================================

model ExpenseReceipt {
  id       String @id @default(cuid())
  schoolId String
  userId   String

  // File information
  fileName        String
  fileDisplayName String?
  fileUrl         String
  fileSize        Int
  mimeType        String

  // Processing status
  status String @default("pending") // pending, processing, processed, error

  // Extracted data (OCR results)
  merchantName      String?
  merchantAddress   String?
  merchantContact   String?
  transactionDate   DateTime?
  transactionAmount Decimal?  @db.Decimal(10, 2)
  currency          String?   @default("USD")
  receiptSummary    String?   @db.Text

  // Line items (stored as JSON)
  items Json? // Array of {name, quantity, unitPrice, totalPrice}

  // Link to expense
  expenseId String?
  expense   Expense? @relation(fields: [expenseId], references: [id])

  // Metadata
  uploadedAt  DateTime  @default(now())
  processedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([schoolId])
  @@index([userId])
  @@index([status])
  @@index([transactionDate])
}

// ============================================
// BANKING SUB-BLOCK (Migrated from banking.prisma)
// ============================================

model BankAccount {
  id               String   @id @default(cuid())
  schoolId         String
  userId           String
  bankId           String
  accountId        String
  accessToken      String   @db.Text // Encrypted
  fundingSourceUrl String?
  shareableId      String?
  institutionId    String
  name             String
  officialName     String?
  mask             String?
  currentBalance   Decimal  @db.Decimal(10, 2)
  availableBalance Decimal  @db.Decimal(10, 2)
  type             String // depository, credit, loan, investment
  subtype          String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  school            School        @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  user              User          @relation("UserBankAccounts", fields: [userId], references: [id], onDelete: Cascade)
  transactions      Transaction[]
  sentTransfers     Transfer[]    @relation("SentTransfers")
  receivedTransfers Transfer[]    @relation("ReceivedTransfers")
  reconciliations   BankReconciliation[]

  @@unique([schoolId, accountId])
  @@index([schoolId])
  @@index([userId])
  @@index([accountId])
}

model Transaction {
  id              String   @id @default(cuid())
  schoolId        String
  accountId       String
  bankAccountId   String
  name            String
  amount          Decimal  @db.Decimal(10, 2)
  date            DateTime
  paymentChannel  String? // online, in_store, other
  category        String
  subcategory     String?
  type            String // debit, credit
  pending         Boolean  @default(false)
  merchantName    String?
  merchantId      String?
  locationAddress String?
  locationCity    String?
  locationState   String?
  locationZip     String?
  locationCountry String?
  isoCurrencyCode String   @default("USD")
  createdAt       DateTime @default(now())

  // Relations
  school      School      @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  bankAccount BankAccount @relation(fields: [bankAccountId], references: [id], onDelete: Cascade)

  @@index([schoolId])
  @@index([bankAccountId])
  @@index([accountId])
  @@index([date])
  @@index([category])
}

model Transfer {
  id                String   @id @default(cuid())
  schoolId          String
  senderBankId      String
  receiverBankId    String
  amount            Decimal  @db.Decimal(10, 2)
  note              String?
  status            String // pending, completed, failed
  transferDate      DateTime
  dwollaTransferId  String?
  dwollaTransferUrl String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  school       School      @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  senderBank   BankAccount @relation("SentTransfers", fields: [senderBankId], references: [id])
  receiverBank BankAccount @relation("ReceivedTransfers", fields: [receiverBankId], references: [id])

  @@unique([schoolId, dwollaTransferId])
  @@index([schoolId])
  @@index([senderBankId])
  @@index([receiverBankId])
  @@index([status])
  @@index([transferDate])
}

model PlaidItem {
  id              String   @id @default(cuid())
  schoolId        String
  userId          String
  accessToken     String   @db.Text // Encrypted
  itemId          String
  institutionId   String
  institutionName String
  cursor          String? // For transaction sync
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  user   User   @relation("UserPlaidItems", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([schoolId, accessToken])
  @@unique([schoolId, itemId])
  @@index([schoolId])
  @@index([userId])
  @@index([itemId])
}

model DwollaCustomer {
  id          String   @id @default(cuid())
  schoolId    String
  userId      String
  customerId  String
  customerUrl String
  status      String // unverified, suspended, retry, document, verified, deactivated
  type        String // personal, business
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  user   User   @relation("UserDwollaCustomers", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([schoolId, userId])
  @@unique([schoolId, customerId])
  @@unique([schoolId, customerUrl])
  @@index([schoolId])
  @@index([customerId])
  @@index([status])
}

// Bank Reconciliation (NEW)
enum ReconciliationStatus {
  IN_PROGRESS
  COMPLETED
  DISCREPANCY
}

model BankReconciliation {
  id               String               @id @default(cuid())
  schoolId         String
  bankAccountId    String
  statementDate    DateTime
  statementBalance Decimal              @db.Decimal(12, 2)
  bookBalance      Decimal              @db.Decimal(12, 2)
  difference       Decimal              @db.Decimal(12, 2)
  status           ReconciliationStatus @default(IN_PROGRESS)
  reconciledBy     String?
  reconciledAt     DateTime?
  notes            String?              @db.Text
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt

  school      School      @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  bankAccount BankAccount @relation(fields: [bankAccountId], references: [id])

  @@index([schoolId, bankAccountId])
  @@index([schoolId, statementDate])
}

// ============================================
// FEE MANAGEMENT SUB-BLOCK (Migrated from fees.prisma)
// ============================================

enum FeeStatus {
  PENDING
  PARTIAL
  PAID
  OVERDUE
  CANCELLED
}

enum PaymentMethod {
  CASH
  CHEQUE
  BANK_TRANSFER
  CREDIT_CARD
  DEBIT_CARD
  UPI
  NET_BANKING
  WALLET
  OTHER
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
  REFUNDED
}

enum RefundStatus {
  REQUESTED
  APPROVED
  PROCESSING
  COMPLETED
  REJECTED
  CANCELLED
}

enum LateFeeType {
  FIXED
  PERCENTAGE
  DAILY
  MONTHLY
}

enum CoverageType {
  PERCENTAGE
  FIXED_AMOUNT
  FULL
}

enum FineType {
  LATE_FEE
  LIBRARY_FINE
  DISCIPLINE_FINE
  DAMAGE_FINE
  OTHER
}

enum ApplicationStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  WITHDRAWN
}

model FeeStructure {
  id           String  @id @default(cuid())
  schoolId     String
  name         String
  academicYear String
  classId      String?
  stream       String?
  description  String?

  // Fee Components
  tuitionFee      Decimal  @db.Decimal(10, 2)
  admissionFee    Decimal? @db.Decimal(10, 2)
  registrationFee Decimal? @db.Decimal(10, 2)
  examFee         Decimal? @db.Decimal(10, 2)
  libraryFee      Decimal? @db.Decimal(10, 2)
  laboratoryFee   Decimal? @db.Decimal(10, 2)
  sportsFee       Decimal? @db.Decimal(10, 2)
  transportFee    Decimal? @db.Decimal(10, 2)
  hostelFee       Decimal? @db.Decimal(10, 2)
  otherFees       Json? // Array of {name, amount}

  // Total and Schedule
  totalAmount     Decimal @db.Decimal(10, 2)
  installments    Int     @default(1)
  paymentSchedule Json? // Array of {dueDate, amount, description}

  // Policies
  lateFeeAmount  Decimal?     @db.Decimal(10, 2)
  lateFeeType    LateFeeType? @default(FIXED)
  discountPolicy Json? // Early payment, sibling discount, etc

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school         School          @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  class          Class?          @relation(fields: [classId], references: [id], onDelete: SetNull)
  feeAssignments FeeAssignment[]

  @@index([schoolId])
  @@index([classId])
  @@index([academicYear])
}

model FeeAssignment {
  id             String @id @default(cuid())
  schoolId       String
  studentId      String
  feeStructureId String
  academicYear   String

  // Custom amounts (if different from structure)
  customAmount Decimal? @db.Decimal(10, 2)
  finalAmount  Decimal  @db.Decimal(10, 2)

  // Discounts and Scholarships
  discounts     Json? // Array of {type, amount, reason}
  scholarshipId String?
  totalDiscount Decimal @default(0) @db.Decimal(10, 2)

  status    FeeStatus @default(PENDING)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  school       School       @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  student      Student      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  feeStructure FeeStructure @relation(fields: [feeStructureId], references: [id], onDelete: Restrict)
  scholarship  Scholarship? @relation(fields: [scholarshipId], references: [id], onDelete: SetNull)
  payments     Payment[]

  @@unique([studentId, feeStructureId, academicYear])
  @@index([schoolId])
  @@index([studentId])
  @@index([status])
}

model Payment {
  id              String @id @default(cuid())
  schoolId        String
  feeAssignmentId String
  studentId       String

  // Payment Details
  paymentNumber String        @unique
  amount        Decimal       @db.Decimal(10, 2)
  paymentDate   DateTime      @default(now())
  paymentMethod PaymentMethod

  // Transaction Details
  transactionId String?
  bankName      String?
  chequeNumber  String?
  cardLastFour  String?

  // Receipt
  receiptNumber String  @unique
  receiptUrl    String?

  // Status
  status     PaymentStatus @default(SUCCESS)
  verifiedBy String?
  verifiedAt DateTime?
  remarks    String?       @db.Text

  // Accounting integration
  journalEntryId String?
  journalEntry   JournalEntry? @relation(fields: [journalEntryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school        School        @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  feeAssignment FeeAssignment @relation(fields: [feeAssignmentId], references: [id], onDelete: Restrict)
  student       Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  refund        Refund?

  @@index([schoolId])
  @@index([studentId])
  @@index([paymentNumber])
  @@index([receiptNumber])
  @@index([paymentDate])
}

model Refund {
  id        String @id @default(cuid())
  schoolId  String
  paymentId String @unique
  studentId String

  // Refund Details
  refundNumber String   @unique
  requestDate  DateTime @default(now())
  amount       Decimal  @db.Decimal(10, 2)
  reason       String   @db.Text

  // Processing
  status              RefundStatus   @default(REQUESTED)
  processedBy         String?
  processedDate       DateTime?
  refundMethod        PaymentMethod?
  refundTransactionId String?

  // Documentation
  supportingDocs Json? // Array of document URLs
  approvalNotes  String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school  School  @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  payment Payment @relation(fields: [paymentId], references: [id], onDelete: Restrict)
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([schoolId])
  @@index([studentId])
  @@index([refundNumber])
  @@index([status])
}

model Scholarship {
  id          String  @id @default(cuid())
  schoolId    String
  name        String
  description String? @db.Text

  // Eligibility
  eligibilityCriteria Json? // Academic, income, category based
  minPercentage       Decimal? @db.Decimal(5, 2)
  maxFamilyIncome     Decimal? @db.Decimal(12, 2)
  categories          Json? // Applicable categories

  // Benefits
  coverageType   CoverageType @default(PERCENTAGE)
  coverageAmount Decimal      @db.Decimal(10, 2)
  components     Json? // Which fee components are covered

  // Validity
  academicYear         String
  startDate            DateTime
  endDate              DateTime
  maxBeneficiaries     Int?
  currentBeneficiaries Int      @default(0)

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school         School                   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  feeAssignments FeeAssignment[]
  applications   ScholarshipApplication[]

  @@index([schoolId])
  @@index([academicYear])
}

model ScholarshipApplication {
  id            String @id @default(cuid())
  schoolId      String
  studentId     String
  scholarshipId String

  // Application Details
  applicationNumber String   @unique
  applicationDate   DateTime @default(now())
  academicYear      String

  // Supporting Information
  familyIncome Decimal? @db.Decimal(12, 2)
  documents    Json? // Income proof, certificates, etc
  statement    String?  @db.Text

  // Review
  status      ApplicationStatus @default(PENDING)
  reviewedBy  String?
  reviewDate  DateTime?
  reviewNotes String?           @db.Text

  // Award Details
  awardedAmount Decimal?  @db.Decimal(10, 2)
  awardDate     DateTime?
  validTill     DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school      School      @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  student     Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  scholarship Scholarship @relation(fields: [scholarshipId], references: [id], onDelete: Cascade)

  @@unique([studentId, scholarshipId, academicYear])
  @@index([schoolId])
  @@index([studentId])
  @@index([status])
}

model Fine {
  id        String @id @default(cuid())
  schoolId  String
  studentId String

  // Fine Details
  fineType FineType
  amount   Decimal  @db.Decimal(10, 2)
  reason   String
  dueDate  DateTime

  // Payment
  isPaid     Boolean   @default(false)
  paidAmount Decimal?  @db.Decimal(10, 2)
  paidDate   DateTime?
  paymentId  String?

  // Waiver
  isWaived     Boolean   @default(false)
  waivedBy     String?
  waivedDate   DateTime?
  waiverReason String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school  School  @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([schoolId])
  @@index([studentId])
  @@index([isPaid])
}

// ============================================
// SALARY SUB-BLOCK (NEW)
// ============================================

enum PayFrequency {
  MONTHLY
  BI_WEEKLY
  WEEKLY
  DAILY
}

enum DeductionType {
  TAX
  INSURANCE
  LOAN
  PENSION
  OTHER
}

model SalaryStructure {
  id          String      @id @default(cuid())
  schoolId    String
  teacherId   String // Teacher or Staff ID
  effectiveFrom DateTime
  effectiveTo   DateTime?
  baseSalary    Decimal     @db.Decimal(10, 2)
  currency      String      @default("USD")
  payFrequency  PayFrequency
  isActive      Boolean     @default(true)
  notes         String?     @db.Text
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  school      School           @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  teacher     Teacher          @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  allowances  SalaryAllowance[]
  deductions  SalaryDeduction[]
  salarySlips SalarySlip[]

  @@index([schoolId, teacherId])
  @@index([schoolId, isActive])
  @@index([schoolId, effectiveFrom, effectiveTo])
}

model SalaryAllowance {
  id          String   @id @default(cuid())
  schoolId    String
  structureId String
  name        String
  amount      Decimal  @db.Decimal(10, 2)
  isTaxable   Boolean  @default(true)
  isRecurring Boolean  @default(true)
  description String?  @db.Text
  createdAt   DateTime @default(now())

  school    School          @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  structure SalaryStructure @relation(fields: [structureId], references: [id], onDelete: Cascade)

  @@index([schoolId, structureId])
}

model SalaryDeduction {
  id          String        @id @default(cuid())
  schoolId    String
  structureId String
  name        String
  amount      Decimal       @db.Decimal(10, 2)
  type        DeductionType
  isRecurring Boolean       @default(true)
  description String?       @db.Text
  createdAt   DateTime      @default(now())

  school    School          @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  structure SalaryStructure @relation(fields: [structureId], references: [id], onDelete: Cascade)

  @@index([schoolId, structureId])
}

// ============================================
// PAYROLL SUB-BLOCK (NEW)
// ============================================

enum PayrollStatus {
  DRAFT
  PROCESSING
  PENDING_APPROVAL
  APPROVED
  PAID
  CANCELLED
}

enum SlipStatus {
  GENERATED
  REVIEWED
  PAID
  CANCELLED
}

model PayrollRun {
  id             String        @id @default(cuid())
  schoolId       String
  runNumber      String        @unique
  payPeriodStart DateTime
  payPeriodEnd   DateTime
  payDate        DateTime
  status         PayrollStatus @default(DRAFT)
  totalGross     Decimal       @db.Decimal(12, 2)
  totalDeductions Decimal      @db.Decimal(12, 2)
  totalNet       Decimal       @db.Decimal(12, 2)
  processedBy    String?
  processedAt    DateTime?
  approvedBy     String?
  approvedAt     DateTime?

  // Accounting integration
  journalEntryId String?
  journalEntry   JournalEntry? @relation(fields: [journalEntryId], references: [id])

  notes     String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school      School       @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  salarySlips SalarySlip[]

  @@index([schoolId, payPeriodStart, payPeriodEnd])
  @@index([schoolId, status])
  @@index([schoolId, payDate])
}

model SalarySlip {
  id            String   @id @default(cuid())
  schoolId      String
  payrollRunId  String
  structureId   String
  teacherId     String
  slipNumber    String   @unique
  payPeriodStart DateTime
  payPeriodEnd   DateTime
  payDate        DateTime

  // Earnings
  baseSalary  Decimal @db.Decimal(10, 2)
  allowances  Json // Array of {name, amount, isTaxable}
  overtime    Decimal @default(0) @db.Decimal(10, 2)
  bonus       Decimal @default(0) @db.Decimal(10, 2)
  grossSalary Decimal @db.Decimal(10, 2)

  // Deductions
  taxAmount       Decimal @db.Decimal(10, 2)
  insurance       Decimal @default(0) @db.Decimal(10, 2)
  loanDeduction   Decimal @default(0) @db.Decimal(10, 2)
  otherDeductions Json // Array of {name, amount}
  totalDeductions Decimal @db.Decimal(10, 2)

  // Net
  netSalary Decimal @db.Decimal(10, 2)

  // Timesheet data
  daysWorked    Int
  daysPresent   Int
  daysAbsent    Int
  hoursWorked   Decimal? @db.Decimal(8, 2)
  overtimeHours Decimal? @db.Decimal(8, 2)

  status    SlipStatus @default(GENERATED)
  paidAt    DateTime?
  notes     String?    @db.Text
  createdAt DateTime   @default(now())

  school      School          @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  payrollRun  PayrollRun      @relation(fields: [payrollRunId], references: [id], onDelete: Cascade)
  structure   SalaryStructure @relation(fields: [structureId], references: [id])
  teacher     Teacher         @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@index([schoolId, payrollRunId])
  @@index([schoolId, teacherId])
  @@index([schoolId, payDate])
  @@index([status])
}

// ============================================
// TIMESHEET SUB-BLOCK (NEW)
// ============================================

enum PeriodStatus {
  OPEN
  CLOSED
  LOCKED
}

enum EntryStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
}

model TimesheetPeriod {
  id        String       @id @default(cuid())
  schoolId  String
  name      String
  startDate DateTime
  endDate   DateTime
  status    PeriodStatus @default(OPEN)
  closedBy  String?
  closedAt  DateTime?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  school  School           @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  entries TimesheetEntry[]

  @@unique([schoolId, name])
  @@index([schoolId, startDate, endDate])
  @@index([schoolId, status])
}

model TimesheetEntry {
  id            String      @id @default(cuid())
  schoolId      String
  periodId      String
  teacherId     String
  entryDate     DateTime
  hoursWorked   Decimal     @db.Decimal(5, 2)
  overtimeHours Decimal     @default(0) @db.Decimal(5, 2)
  leaveHours    Decimal     @default(0) @db.Decimal(5, 2)
  leaveType     String?
  notes         String?     @db.Text
  status        EntryStatus @default(DRAFT)
  submittedBy   String?
  submittedAt   DateTime?
  approvedBy    String?
  approvedAt    DateTime?
  rejectedBy    String?
  rejectedAt    DateTime?
  rejectionReason String?   @db.Text
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  school  School          @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  period  TimesheetPeriod @relation(fields: [periodId], references: [id], onDelete: Cascade)
  teacher Teacher         @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@unique([schoolId, periodId, teacherId, entryDate])
  @@index([schoolId, periodId])
  @@index([schoolId, teacherId])
  @@index([schoolId, entryDate])
  @@index([status])
}

// ============================================
// WALLET SUB-BLOCK (NEW)
// ============================================

enum WalletType {
  SCHOOL
  PARENT
  STUDENT
}

enum TransactionType {
  CREDIT
  DEBIT
  TRANSFER
}

model Wallet {
  id        String     @id @default(cuid())
  schoolId  String
  walletType WalletType
  ownerId   String // schoolId for SCHOOL, userId for PARENT/STUDENT
  balance   Decimal    @default(0) @db.Decimal(10, 2)
  currency  String     @default("USD")
  isActive  Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  school       School              @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  transactions WalletTransaction[]

  @@unique([schoolId, walletType, ownerId])
  @@index([schoolId, walletType])
  @@index([schoolId, ownerId])
}

model WalletTransaction {
  id             String          @id @default(cuid())
  schoolId       String
  walletId       String
  type           TransactionType
  amount         Decimal         @db.Decimal(10, 2)
  balanceAfter   Decimal         @db.Decimal(10, 2)
  reference      String?
  description    String          @db.Text
  sourceModule   String? // "fees", "refund", "advance"
  sourceRecordId String?

  // Accounting integration
  journalEntryId String?
  journalEntry   JournalEntry? @relation(fields: [journalEntryId], references: [id])

  createdBy String
  createdAt DateTime @default(now())

  school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  wallet Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@index([schoolId, walletId])
  @@index([schoolId, createdAt])
  @@index([sourceModule, sourceRecordId])
}

// ============================================
// BUDGET SUB-BLOCK (NEW)
// ============================================

enum BudgetStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  ACTIVE
  CLOSED
}

model Budget {
  id           String       @id @default(cuid())
  schoolId     String
  fiscalYearId String
  name         String
  description  String?      @db.Text
  departmentId String?
  totalAmount  Decimal      @db.Decimal(12, 2)
  status       BudgetStatus @default(DRAFT)
  approvedBy   String?
  approvedAt   DateTime?
  createdBy    String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  school      School             @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  fiscalYear  FiscalYear         @relation(fields: [fiscalYearId], references: [id])
  allocations BudgetAllocation[]

  @@index([schoolId, fiscalYearId])
  @@index([schoolId, status])
  @@index([schoolId, createdBy])
}

model BudgetAllocation {
  id         String   @id @default(cuid())
  schoolId   String
  budgetId   String
  categoryId String
  allocated  Decimal  @db.Decimal(12, 2)
  spent      Decimal  @default(0) @db.Decimal(12, 2)
  remaining  Decimal  @db.Decimal(12, 2)
  notes      String?  @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  school   School          @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  budget   Budget          @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  category ExpenseCategory @relation(fields: [categoryId], references: [id])

  @@unique([budgetId, categoryId])
  @@index([schoolId, budgetId])
  @@index([schoolId, categoryId])
}

// ============================================
// EXPENSES SUB-BLOCK (NEW)
// ============================================

enum ExpenseStatus {
  PENDING
  APPROVED
  REJECTED
  PAID
  CANCELLED
}

model ExpenseCategory {
  id               String  @id @default(cuid())
  schoolId         String
  name             String
  description      String? @db.Text
  accountId        String? // Link to chart of accounts
  parentId         String?
  isActive         Boolean @default(true)
  requiresApproval Boolean @default(true)
  createdAt        DateTime @default(now())

  school       School            @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  account      ChartOfAccount?   @relation(fields: [accountId], references: [id])
  parent       ExpenseCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  children     ExpenseCategory[] @relation("CategoryHierarchy")
  expenses     Expense[]
  allocations  BudgetAllocation[]

  @@unique([schoolId, name])
  @@index([schoolId, isActive])
  @@index([schoolId, parentId])
}

model Expense {
  id             String        @id @default(cuid())
  schoolId       String
  expenseNumber  String        @unique
  categoryId     String
  amount         Decimal       @db.Decimal(10, 2)
  expenseDate    DateTime
  vendor         String?
  description    String        @db.Text
  paymentMethod  String?
  receiptUrl     String?
  budgetId       String?
  status         ExpenseStatus @default(PENDING)
  submittedBy    String
  submittedAt    DateTime
  approvedBy     String?
  approvedAt     DateTime?
  rejectedBy     String?
  rejectedAt     DateTime?
  rejectionReason String?      @db.Text
  paidAt         DateTime?

  // Accounting integration
  journalEntryId String?
  journalEntry   JournalEntry? @relation(fields: [journalEntryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school   School          @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  category ExpenseCategory @relation(fields: [categoryId], references: [id])
  receipts ExpenseReceipt[]

  @@index([schoolId, expenseDate])
  @@index([schoolId, categoryId])
  @@index([schoolId, status])
  @@index([schoolId, submittedBy])
}

// ============================================
// REPORTS SUB-BLOCK (NEW)
// ============================================

enum FinancialReportType {
  PROFIT_LOSS
  BALANCE_SHEET
  CASH_FLOW
  TRIAL_BALANCE
  GENERAL_LEDGER
  BUDGET_VARIANCE
  PAYROLL_SUMMARY
  FEE_COLLECTION
  EXPENSE_REPORT
  CUSTOM
}

enum FinancialReportStatus {
  GENERATING
  COMPLETED
  FAILED
}

model FinancialReport {
  id           String               @id @default(cuid())
  schoolId     String
  reportType   FinancialReportType
  reportName   String
  fiscalYearId String?
  startDate    DateTime
  endDate      DateTime
  parameters   Json? // Report-specific parameters
  fileUrl      String?
  status       FinancialReportStatus @default(GENERATING)
  generatedBy  String
  generatedAt  DateTime              @default(now())

  school     School      @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  fiscalYear FiscalYear? @relation(fields: [fiscalYearId], references: [id])

  @@index([schoolId, reportType])
  @@index([schoolId, generatedAt])
  @@index([schoolId, status])
}

// ============================================
// PERMISSIONS SUB-BLOCK (NEW)
// ============================================

model FinancePermission {
  id       String @id @default(cuid())
  schoolId String
  userId   String
  module   String // "invoice", "payroll", "budget", "expenses", "accounts", etc.
  action   String // "view", "create", "edit", "delete", "approve", "process"
  createdAt DateTime @default(now())

  school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([schoolId, userId, module, action])
  @@index([schoolId, userId])
  @@index([schoolId, module])
}
