// Gradebook and Results Models

// Individual grade/result entry (can be for assignments, exams, or standalone grades)
model Result {
  id           String   @id @default(cuid())
  schoolId     String
  studentId    String
  classId      String
  assignmentId String? // Optional: link to assignment if grading assignment
  examId       String? // Optional: link to exam if grading exam
  subjectId    String? // Optional: for subject-specific grades

  // Scoring
  score        Decimal  @db.Decimal(6, 2)
  maxScore     Decimal  @db.Decimal(6, 2)
  percentage   Float    // Auto-calculated
  grade        String   // Letter grade (A+, A, B+, etc.)

  // Metadata
  title        String? // Title if standalone grade entry
  description  String?  @db.Text
  feedback     String?  @db.Text
  submittedAt  DateTime?
  gradedAt     DateTime
  gradedBy     String? // Teacher ID who entered the grade

  // Relations
  school     School              @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  student    Student             @relation(fields: [studentId], references: [id], onDelete: Cascade)
  class      Class               @relation(fields: [classId], references: [id], onDelete: Cascade)
  assignment Assignment?         @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  exam       Exam?               @relation(fields: [examId], references: [id], onDelete: Cascade)
  subject    Subject?            @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([schoolId, studentId])
  @@index([schoolId, classId])
  @@index([schoolId, assignmentId])
  @@index([schoolId, examId])
  @@index([schoolId, subjectId])
  @@index([schoolId, gradedAt])
  @@map("results")
}

// Report card for a specific term/period
model ReportCard {
  id            String   @id @default(cuid())
  schoolId      String
  studentId     String
  termId        String
  yearLevelId   String?

  // Overall performance
  overallGrade  String?
  overallGPA    Decimal? @db.Decimal(3, 2)
  rank          Int?     // Student rank in class
  totalStudents Int?     // Total students in class for rank context

  // Attendance summary
  daysPresent   Int?
  daysAbsent    Int?
  daysLate      Int?

  // Comments
  teacherComments String? @db.Text
  principalComments String? @db.Text

  // Status
  isPublished   Boolean  @default(false)
  publishedAt   DateTime?

  // Relations
  school    School     @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  student   Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  term      Term       @relation(fields: [termId], references: [id], onDelete: Cascade)
  yearLevel YearLevel? @relation(fields: [yearLevelId], references: [id], onDelete: SetNull)
  grades    ReportCardGrade[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([schoolId, studentId, termId])
  @@index([schoolId, termId])
  @@index([schoolId, studentId])
  @@index([schoolId, isPublished])
  @@map("report_cards")
}

// Individual subject grade in a report card
model ReportCardGrade {
  id           String @id @default(cuid())
  schoolId     String
  reportCardId String
  subjectId    String

  grade        String
  score        Decimal? @db.Decimal(6, 2)
  maxScore     Decimal? @db.Decimal(6, 2)
  percentage   Float?
  credits      Decimal? @db.Decimal(3, 1)

  comments     String? @db.Text

  // Relations
  school     School      @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  reportCard ReportCard  @relation(fields: [reportCardId], references: [id], onDelete: Cascade)
  subject    Subject     @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([reportCardId, subjectId])
  @@index([schoolId, reportCardId])
  @@index([schoolId, subjectId])
  @@map("report_card_grades")
}
