// Subject and Class Models

enum EvaluationType {
  NORMAL // Percentage-based (0-100%)
  GPA // Grade Point Average (4.0 scale)
  CWA // Cumulative Weighted Average
  CCE // Continuous Comprehensive Evaluation
}

model Subject {
  id           String @id @default(cuid())
  schoolId     String
  departmentId String
  subjectName  String

  school           School                    @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  department       Department                @relation(fields: [departmentId], references: [id])
  classes          Class[]
  exams            Exam[]
  results          Result[]
  reportCardGrades ReportCardGrade[]
  teacherExpertise TeacherSubjectExpertise[]

  // Quiz relations
  quizCategories QuizCategory[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  QuestionBank QuestionBank[]
  ExamTemplate ExamTemplate[]

  @@unique([schoolId, departmentId, subjectName]) // Unique subject per department per school
  @@map("subjects")
}

model Class {
  id            String @id @default(cuid())
  schoolId      String
  subjectId     String
  teacherId     String
  termId        String
  startPeriodId String
  endPeriodId   String
  classroomId   String
  name          String

  // Course Management Fields
  courseCode     String? // e.g., "CS101", "MATH201"
  credits        Decimal?       @db.Decimal(3, 2) // Credit hours/units
  evaluationType EvaluationType @default(NORMAL)
  minCapacity    Int?           @default(10) // Minimum students
  maxCapacity    Int?           @default(50) // Maximum students
  duration       Int? // Duration in weeks
  prerequisiteId String? // Parent course (course hierarchy)

  school       School    @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  subject      Subject   @relation(fields: [subjectId], references: [id])
  teacher      Teacher   @relation(fields: [teacherId], references: [id])
  term         Term      @relation(fields: [termId], references: [id])
  startPeriod  Period    @relation("ClassStartPeriod", fields: [startPeriodId], references: [id])
  endPeriod    Period    @relation("ClassEndPeriod", fields: [endPeriodId], references: [id])
  classroom    Classroom @relation(fields: [classroomId], references: [id])
  prerequisite Class?    @relation("CoursePrerequisites", fields: [prerequisiteId], references: [id], onDelete: SetNull)

  studentClasses   StudentClass[]
  assignments      Assignment[]
  attendances      Attendance[]
  announcements    Announcement[]
  timetables       Timetable[]
  exams            Exam[]
  results          Result[]
  lessons          Lesson[]
  dependentCourses Class[]        @relation("CoursePrerequisites")
  classTeachers    ClassTeacher[] // Co-teaching support
  feeStructures    FeeStructure[] // Fees module relation

  // Enhanced Attendance relations
  attendanceSessions AttendanceSession[]
  qrCodeSessions     QRCodeSession[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([schoolId, name]) // Unique class name per school
  @@index([courseCode])
  @@index([evaluationType])
  @@map("classes")
}

model StudentClass {
  id        String   @id @default(cuid())
  schoolId  String
  studentId String
  classId   String
  score     Decimal? @db.Decimal(5, 2) // Final score for the class

  school  School  @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  class   Class   @relation(fields: [classId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([schoolId, studentId, classId]) // Unique student-class per school
  @@map("student_classes")
}

model ScoreRange {
  id       String  @id @default(cuid())
  schoolId String
  minScore Decimal @db.Decimal(5, 2)
  maxScore Decimal @db.Decimal(5, 2)
  grade    String // A+, A, B+, B, etc.

  school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([schoolId, grade]) // Unique grade per school
  @@map("score_ranges")
}

// Class-Teacher Join Table (Co-teaching Support)
model ClassTeacher {
  id        String @id @default(cuid())
  schoolId  String
  classId   String
  teacherId String
  role      String @default("PRIMARY") // PRIMARY, CO_TEACHER, ASSISTANT

  class   Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  school  School  @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([schoolId, classId, teacherId]) // One role per teacher per class
  @@index([schoolId, teacherId])
  @@map("class_teachers")
}
