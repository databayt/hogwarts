// ============================================================================
// EXAM MANAGEMENT SYSTEM - CONSOLIDATED MODELS
// ============================================================================
// This file contains all models for the 5-block exam management system:
// 1. Manage - Schedule and organize exams
// 2. Question Bank (QBank) - Build question repository
// 3. Auto-Generate - AI-powered exam creation
// 4. Auto-Mark - Automated grading system
// 5. Results - Analytics and PDF reports
// ============================================================================

// ========== ENUMS ==========

// Basic Exam Enums
enum ExamType {
  MIDTERM
  FINAL
  QUIZ
  TEST
  PRACTICAL
}

enum ExamStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// Question Bank Enums
enum QuestionType {
  MULTIPLE_CHOICE // MCQ with options
  TRUE_FALSE      // Boolean question
  SHORT_ANSWER    // 1-2 sentence response
  ESSAY           // Long-form answer
  FILL_BLANK      // Fill in the blanks
}

enum DifficultyLevel {
  EASY
  MEDIUM
  HARD
}

// Bloom's Taxonomy Cognitive Levels
enum BloomLevel {
  REMEMBER   // Level 1: Recall facts
  UNDERSTAND // Level 2: Explain concepts
  APPLY      // Level 3: Use in new situations
  ANALYZE    // Level 4: Draw connections
  EVALUATE   // Level 5: Justify decisions
  CREATE     // Level 6: Produce new work
}

enum QuestionSource {
  MANUAL   // Created manually by teacher
  AI       // Generated by AI
  IMPORTED // Imported from external source
}

// Auto-Marking Enums
enum GradingMethod {
  AUTO        // Fully automated (MCQ, T/F, Fill Blank)
  AI_ASSISTED // AI grading with teacher review (Short Answer, Essay)
  MANUAL      // Teacher grades manually
}

enum SubmissionType {
  DIGITAL // Answered directly in platform
  UPLOAD  // Uploaded file (PDF/image)
  OCR     // Scanned and processed via OCR
}

enum MarkingStatus {
  NOT_STARTED // No grading yet
  IN_PROGRESS // Partially graded
  AUTO_GRADED // Auto-graded, pending review
  AI_GRADED   // AI-graded, pending review
  REVIEWED    // Teacher reviewed
  COMPLETED   // Finalized
}

// ========== BASIC EXAM MANAGEMENT (MANAGE BLOCK) ==========

// Main Exam model
model Exam {
  id           String     @id @default(cuid())
  schoolId     String
  title        String
  description  String?    @db.Text
  classId      String
  subjectId    String
  examDate     DateTime
  startTime    String     // Format: "HH:MM" (e.g., "09:00")
  endTime      String     // Format: "HH:MM" (e.g., "11:00")
  duration     Int        // Duration in minutes
  totalMarks   Int
  passingMarks Int
  examType     ExamType
  instructions String?    @db.Text
  status       ExamStatus @default(PLANNED)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  school         School          @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  class          Class           @relation(fields: [classId], references: [id], onDelete: Cascade)
  subject        Subject         @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  examResults    ExamResult[]
  results        Result[]
  generatedExam  GeneratedExam?  // Auto-generated exam (one-to-one)
  studentAnswers StudentAnswer[] // Auto-marking system
  markingResults MarkingResult[] // Auto-marking system

  @@index([schoolId, examDate])
  @@index([schoolId, classId])
  @@index([schoolId, subjectId])
  @@index([schoolId, status])
  @@map("exams")
}

// Exam results for students
model ExamResult {
  id            String   @id @default(cuid())
  schoolId      String
  examId        String
  studentId     String
  marksObtained Int
  totalMarks    Int
  percentage    Float
  grade         String?
  remarks       String?  @db.Text
  isAbsent      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  school  School  @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  exam    Exam    @relation(fields: [examId], references: [id], onDelete: Cascade)
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([examId, studentId])
  @@index([schoolId, examId])
  @@index([schoolId, studentId])
  @@map("exam_results")
}

// Grade boundaries for letter grades
model GradeBoundary {
  id        String   @id @default(cuid())
  schoolId  String
  grade     String   // A+, A, B+, B, C+, C, D, F
  minScore  Decimal  @db.Decimal(5, 2)
  maxScore  Decimal  @db.Decimal(5, 2)
  gpaValue  Decimal  @db.Decimal(3, 2) // GPA equivalent (e.g., 4.0, 3.7)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@unique([schoolId, grade])
  @@index([schoolId, minScore, maxScore])
  @@map("grade_boundaries")
}

// ========== QUESTION BANK & GENERATION (QBANK + GENERATE BLOCKS) ==========

// Question Bank - Reusable question library
model QuestionBank {
  id           String          @id @default(cuid())
  schoolId     String
  subjectId    String
  questionText String          @db.Text
  questionType QuestionType
  difficulty   DifficultyLevel
  bloomLevel   BloomLevel
  points       Decimal         @default(1) @db.Decimal(5, 2)
  timeEstimate Int?            // Estimated time in minutes

  // Question-specific data (JSON)
  // For MCQ/True-False: [{text: string, isCorrect: boolean, explanation?: string}]
  // For Fill-in-Blank: {acceptedAnswers: string[], caseSensitive: boolean}
  options Json?

  // For Short Answer/Essay
  sampleAnswer  String? @db.Text
  gradingRubric String? @db.Text

  // Metadata
  tags        String[]       // ["algebra", "equations", "grade-9"]
  explanation String?        @db.Text
  source      QuestionSource @default(MANUAL)
  aiPrompt    String?        @db.Text // For AI-generated questions
  imageUrl    String?        // Optional question image

  // Relations
  school                 School                  @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  subject                Subject                 @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  generatedExamQuestions GeneratedExamQuestion[]
  analytics              QuestionAnalytics?

  // Marking system relations
  rubrics        Rubric[]
  studentAnswers StudentAnswer[]
  markingResults MarkingResult[]

  // Quiz game relations
  quizGameQuestions QuizGameQuestion[]

  createdBy String   // Teacher ID
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([schoolId, subjectId])
  @@index([schoolId, difficulty, bloomLevel])
  @@index([schoolId, questionType])
  @@index([schoolId, createdBy])
  @@index([schoolId, source])
  @@map("question_bank")
}

// Question Analytics - Track question performance
model QuestionAnalytics {
  id         String @id @default(cuid())
  schoolId   String
  questionId String @unique

  timesUsed    Int      @default(0)
  avgScore     Decimal? @db.Decimal(5, 2)
  successRate  Float?   // Percentage 0-100
  avgTimeSpent Float?   // Average time in minutes

  // Difficulty analysis
  perceivedDifficulty DifficultyLevel? // Based on student performance

  // Relations
  school   School       @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  question QuestionBank @relation(fields: [questionId], references: [id], onDelete: Cascade)

  lastUsed  DateTime?
  updatedAt DateTime  @updatedAt

  @@index([schoolId, questionId])
  @@index([schoolId, timesUsed])
  @@index([schoolId, successRate])
  @@map("question_analytics")
}

// Exam Templates - Reusable exam blueprints
model ExamTemplate {
  id          String  @id @default(cuid())
  schoolId    String
  name        String
  description String? @db.Text
  subjectId   String
  duration    Int     // Minutes
  totalMarks  Decimal @db.Decimal(6, 2)

  // Distribution rules (JSON structure)
  // Example: {
  //   "MULTIPLE_CHOICE": {"EASY": 5, "MEDIUM": 3, "HARD": 2},
  //   "SHORT_ANSWER": {"MEDIUM": 3}
  // }
  distribution Json

  // Optional Bloom's distribution
  // Example: {"REMEMBER": 4, "UNDERSTAND": 3, "APPLY": 3}
  bloomDistribution Json?

  // Relations
  school         School          @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  subject        Subject         @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  generatedExams GeneratedExam[]

  createdBy String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([schoolId, subjectId])
  @@index([schoolId, isActive])
  @@index([schoolId, createdBy])
  @@map("exam_templates")
}

// Generated Exams - Links templates to actual exams
model GeneratedExam {
  id             String  @id @default(cuid())
  schoolId       String
  examId         String  // Links to Exam model
  templateId     String?
  isRandomized   Boolean @default(false)
  seed           String? // For reproducible randomization
  totalQuestions Int     @default(0)

  // Metadata
  generationNotes String? @db.Text

  // Relations
  school    School                  @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  exam      Exam                    @relation(fields: [examId], references: [id], onDelete: Cascade)
  template  ExamTemplate?           @relation(fields: [templateId], references: [id], onDelete: SetNull)
  questions GeneratedExamQuestion[]

  generatedBy String
  createdAt   DateTime @default(now())

  @@unique([examId]) // One generated exam per exam
  @@index([schoolId, examId])
  @@index([schoolId, templateId])
  @@index([schoolId, generatedBy])
  @@map("generated_exams")
}

// Questions in a Generated Exam
model GeneratedExamQuestion {
  id              String  @id @default(cuid())
  schoolId        String
  generatedExamId String
  questionId      String
  order           Int
  points          Decimal @db.Decimal(5, 2)

  // Optional per-question overrides
  customInstructions String? @db.Text

  // Relations
  school        School        @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  generatedExam GeneratedExam @relation(fields: [generatedExamId], references: [id], onDelete: Cascade)
  question      QuestionBank  @relation(fields: [questionId], references: [id], onDelete: Restrict)

  @@unique([generatedExamId, order])
  @@unique([generatedExamId, questionId]) // No duplicate questions in same exam
  @@index([schoolId, generatedExamId])
  @@index([schoolId, questionId])
  @@map("generated_exam_questions")
}

// ========== AUTO-MARKING SYSTEM (MARK BLOCK) ==========

// Grading Rubric for subjective questions
model Rubric {
  id          String  @id @default(cuid())
  schoolId    String
  questionId  String  @unique // Links to QuestionBank
  title       String
  description String? @db.Text
  totalPoints Decimal @db.Decimal(5, 2)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school   School            @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  question QuestionBank      @relation(fields: [questionId], references: [id], onDelete: Cascade)
  criteria RubricCriterion[]

  @@index([schoolId, questionId])
  @@map("rubrics")
}

// Individual rubric criteria
model RubricCriterion {
  id          String  @id @default(cuid())
  schoolId    String
  rubricId    String
  criterion   String  @db.Text // What to evaluate
  description String? @db.Text // Detailed description
  maxPoints   Decimal @db.Decimal(5, 2)
  order       Int     @default(0)

  school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  rubric Rubric @relation(fields: [rubricId], references: [id], onDelete: Cascade)

  @@index([schoolId, rubricId])
  @@map("rubric_criteria")
}

// Student answers/responses for exam questions
model StudentAnswer {
  id             String         @id @default(cuid())
  schoolId       String
  examId         String         // Links to Exam
  questionId     String         // Links to QuestionBank
  studentId      String
  submissionType SubmissionType

  // Answer content
  answerText        String?  @db.Text // Digital answer
  selectedOptionIds String[] // For MCQ (array of indices)
  uploadUrl         String?  // Uploaded file URL
  ocrText           String?  @db.Text // Extracted text from OCR
  ocrConfidence     Float?   // OCR accuracy confidence (0-1)

  // Timestamps
  submittedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  school        School         @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  exam          Exam           @relation(fields: [examId], references: [id], onDelete: Cascade)
  question      QuestionBank   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  student       Student        @relation(fields: [studentId], references: [id], onDelete: Cascade)
  markingResult MarkingResult?

  @@unique([examId, questionId, studentId])
  @@index([schoolId, examId])
  @@index([schoolId, studentId])
  @@index([schoolId, questionId])
  @@index([schoolId, examId, submittedAt])
  @@index([schoolId, submissionType])
  @@map("student_answers")
}

// Marking/Grading results
model MarkingResult {
  id              String @id @default(cuid())
  schoolId        String
  studentAnswerId String @unique
  examId          String
  questionId      String // Links to QuestionBank
  studentId       String

  // Grading details
  gradingMethod GradingMethod
  status        MarkingStatus @default(NOT_STARTED)
  pointsAwarded Decimal       @db.Decimal(5, 2)
  maxPoints     Decimal       @db.Decimal(5, 2)

  // AI grading
  aiScore      Decimal? @db.Decimal(5, 2)
  aiConfidence Float?   // AI confidence score (0-1)
  aiReasoning  String?  @db.Text // AI explanation

  // Teacher feedback
  feedback String?   @db.Text
  gradedBy String?   // Teacher ID
  gradedAt DateTime?

  // Flags
  needsReview   Boolean @default(false)
  wasOverridden Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school        School          @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  studentAnswer StudentAnswer   @relation(fields: [studentAnswerId], references: [id], onDelete: Cascade)
  exam          Exam            @relation(fields: [examId], references: [id], onDelete: Cascade)
  question      QuestionBank    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  student       Student         @relation(fields: [studentId], references: [id], onDelete: Cascade)
  overrides     GradeOverride[]

  @@index([schoolId, examId])
  @@index([schoolId, studentId])
  @@index([schoolId, status])
  @@index([schoolId, gradingMethod])
  @@index([schoolId, needsReview])
  @@index([schoolId, gradedBy])
  @@index([schoolId, examId, status])
  @@index([schoolId, status, needsReview])
  @@map("marking_results")
}

// Manual grade overrides/adjustments
model GradeOverride {
  id              String @id @default(cuid())
  schoolId        String
  markingResultId String

  previousScore Decimal  @db.Decimal(5, 2)
  newScore      Decimal  @db.Decimal(5, 2)
  reason        String   @db.Text
  overriddenBy  String   // Teacher ID
  overriddenAt  DateTime @default(now())

  school        School        @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  markingResult MarkingResult @relation(fields: [markingResultId], references: [id], onDelete: Cascade)

  @@index([schoolId, markingResultId])
  @@index([schoolId, overriddenBy])
  @@map("grade_overrides")
}

// ========== RESULTS & GRADING (RESULTS BLOCK) ==========

// Individual grade/result entry (can be for assignments, exams, or standalone grades)
model Result {
  id           String  @id @default(cuid())
  schoolId     String
  studentId    String
  classId      String
  assignmentId String? // Optional: link to assignment if grading assignment
  examId       String? // Optional: link to exam if grading exam
  subjectId    String? // Optional: for subject-specific grades

  // Scoring
  score      Decimal @db.Decimal(6, 2)
  maxScore   Decimal @db.Decimal(6, 2)
  percentage Float   // Auto-calculated
  grade      String  // Letter grade (A+, A, B+, etc.)

  // Metadata
  title       String?   // Title if standalone grade entry
  description String?   @db.Text
  feedback    String?   @db.Text
  submittedAt DateTime?
  gradedAt    DateTime
  gradedBy    String?   // Teacher ID who entered the grade

  // Relations
  school     School      @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  student    Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  class      Class       @relation(fields: [classId], references: [id], onDelete: Cascade)
  assignment Assignment? @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  exam       Exam?       @relation(fields: [examId], references: [id], onDelete: Cascade)
  subject    Subject?    @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([schoolId, studentId])
  @@index([schoolId, classId])
  @@index([schoolId, assignmentId])
  @@index([schoolId, examId])
  @@index([schoolId, subjectId])
  @@index([schoolId, gradedAt])
  @@map("results")
}

// Report card for a specific term/period
model ReportCard {
  id          String  @id @default(cuid())
  schoolId    String
  studentId   String
  termId      String
  yearLevelId String?

  // Overall performance
  overallGrade  String?
  overallGPA    Decimal? @db.Decimal(3, 2)
  rank          Int?     // Student rank in class
  totalStudents Int?     // Total students in class for rank context

  // Attendance summary
  daysPresent Int?
  daysAbsent  Int?
  daysLate    Int?

  // Comments
  teacherComments   String? @db.Text
  principalComments String? @db.Text

  // Status
  isPublished Boolean   @default(false)
  publishedAt DateTime?

  // Relations
  school    School            @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  student   Student           @relation(fields: [studentId], references: [id], onDelete: Cascade)
  term      Term              @relation(fields: [termId], references: [id], onDelete: Cascade)
  yearLevel YearLevel?        @relation(fields: [yearLevelId], references: [id], onDelete: SetNull)
  grades    ReportCardGrade[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([schoolId, studentId, termId])
  @@index([schoolId, termId])
  @@index([schoolId, studentId])
  @@index([schoolId, isPublished])
  @@map("report_cards")
}

// Individual subject grade in a report card
model ReportCardGrade {
  id           String @id @default(cuid())
  schoolId     String
  reportCardId String
  subjectId    String

  grade      String
  score      Decimal? @db.Decimal(6, 2)
  maxScore   Decimal? @db.Decimal(6, 2)
  percentage Float?
  credits    Decimal? @db.Decimal(3, 1)

  comments String? @db.Text

  // Relations
  school     School     @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  reportCard ReportCard @relation(fields: [reportCardId], references: [id], onDelete: Cascade)
  subject    Subject    @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([reportCardId, subjectId])
  @@index([schoolId, reportCardId])
  @@index([schoolId, subjectId])
  @@map("report_card_grades")
}
