// Auth Models
enum UserRole {
  DEVELOPER // Platform admin (across all schools)
  ADMIN // School admin
  TEACHER
  STUDENT
  GUARDIAN
  ACCOUNTANT // School accountant/finance
  STAFF // General school staff
  USER // General user
}

model User {
  id            String    @id @default(cuid())
  username      String?
  email         String?
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)

  // Multi-tenant fields
  schoolId String? // null for DEVELOPER
  school   School? @relation(fields: [schoolId], references: [id])

  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  // School relationships
  student  Student?
  teacher  Teacher?
  guardian Guardian?

  // Stripe subscription fields (user-scoped for compatibility with pricing UI)
  stripeSubscriptionId   String?
  stripeCustomerId       String?
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?

  // User-scoped invoicing (standalone invoice block)
  userInvoices        UserInvoice[]
  userInvoiceSettings UserInvoiceSettings?

  // Legal relations
  legalConsents  LegalConsent[]
  complianceLogs ComplianceLog[]

  // Stream (LMS) relations
  streamCourses        StreamCourse[]         @relation("UserCourses")
  streamEnrollments    StreamEnrollment[]
  streamLessonProgress StreamLessonProgress[]
  streamCertificates   StreamCertificate[]

  // Library relations
  borrowRecords BorrowRecord[]

  // Banking relations
  bankAccounts    BankAccount[]    @relation("UserBankAccounts")
  plaidItems      PlaidItem[]      @relation("UserPlaidItems")
  dwollaCustomers DwollaCustomer[] @relation("UserDwollaCustomers")

  // Billing relations
  billingPaymentMethods BillingPaymentMethod[]
  billingHistory        BillingHistory[]
  creditNotes           CreditNote[]

  // Receipt tracking relations
  expenseReceipts ExpenseReceipt[]

  // Theme customization
  themes UserTheme[]

  // Quiz relations
  quizGames          QuizGame[]
  quizCategoryStats  QuizCategoryStats[]
  quizAchievements   QuizAchievement[]
  quizLeaderboards   QuizLeaderboard[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, schoolId]) // Allow same email across different schools
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
