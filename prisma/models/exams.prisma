// Examination Models

enum ExamType {
  MIDTERM
  FINAL
  QUIZ
  TEST
  PRACTICAL
}

enum ExamStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Exam {
  id           String     @id @default(cuid())
  schoolId     String
  title        String
  description  String?    @db.Text
  classId      String
  subjectId    String
  examDate     DateTime
  startTime    String // Format: "HH:MM" (e.g., "09:00")
  endTime      String // Format: "HH:MM" (e.g., "11:00")
  duration     Int // Duration in minutes
  totalMarks   Int
  passingMarks Int
  examType     ExamType
  instructions String?    @db.Text
  status       ExamStatus @default(PLANNED)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  school         School          @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  class          Class           @relation(fields: [classId], references: [id], onDelete: Cascade)
  subject        Subject         @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  examResults    ExamResult[]
  results        Result[]
  generatedExam  GeneratedExam? // Auto-generated exam (one-to-one)
  studentAnswers StudentAnswer[] // Auto-marking system
  markingResults MarkingResult[] // Auto-marking system

  @@index([schoolId, examDate])
  @@index([schoolId, classId])
  @@index([schoolId, subjectId])
  @@index([schoolId, status])
  @@map("exams")
}

model ExamResult {
  id            String   @id @default(cuid())
  schoolId      String
  examId        String
  studentId     String
  marksObtained Int
  totalMarks    Int
  percentage    Float
  grade         String?
  remarks       String?  @db.Text
  isAbsent      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  school  School  @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  exam    Exam    @relation(fields: [examId], references: [id], onDelete: Cascade)
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([examId, studentId])
  @@index([schoolId, examId])
  @@index([schoolId, studentId])
  @@map("exam_results")
}

model GradeBoundary {
  id        String   @id @default(cuid())
  schoolId  String
  grade     String // A+, A, B+, B, C+, C, D, F
  minScore  Decimal  @db.Decimal(5, 2)
  maxScore  Decimal  @db.Decimal(5, 2)
  gpaValue  Decimal  @db.Decimal(3, 2) // GPA equivalent (e.g., 4.0, 3.7)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@unique([schoolId, grade])
  @@index([schoolId, minScore, maxScore])
  @@map("grade_boundaries")
}

// ====== AUTO-GENERATE EXAM FEATURE ======
// Question Bank and Exam Generation System

// Question Types
enum QuestionType {
  MULTIPLE_CHOICE // MCQ with options
  TRUE_FALSE // Boolean question
  SHORT_ANSWER // 1-2 sentence response
  ESSAY // Long-form answer
  FILL_BLANK // Fill in the blanks
}

// Difficulty Levels
enum DifficultyLevel {
  EASY
  MEDIUM
  HARD
}

// Bloom's Taxonomy Cognitive Levels
enum BloomLevel {
  REMEMBER // Level 1: Recall facts
  UNDERSTAND // Level 2: Explain concepts
  APPLY // Level 3: Use in new situations
  ANALYZE // Level 4: Draw connections
  EVALUATE // Level 5: Justify decisions
  CREATE // Level 6: Produce new work
}

// Question Source
enum QuestionSource {
  MANUAL // Created manually by teacher
  AI // Generated by AI
  IMPORTED // Imported from external source
}

// Question Bank - Reusable question library
model QuestionBank {
  id           String          @id @default(cuid())
  schoolId     String
  subjectId    String
  questionText String          @db.Text
  questionType QuestionType
  difficulty   DifficultyLevel
  bloomLevel   BloomLevel
  points       Decimal         @default(1) @db.Decimal(5, 2)
  timeEstimate Int? // Estimated time in minutes

  // Question-specific data (JSON)
  // For MCQ/True-False: [{text: string, isCorrect: boolean, explanation?: string}]
  // For Fill-in-Blank: {acceptedAnswers: string[], caseSensitive: boolean}
  options Json?

  // For Short Answer/Essay
  sampleAnswer  String? @db.Text
  gradingRubric String? @db.Text

  // Metadata
  tags        String[] // ["algebra", "equations", "grade-9"]
  explanation String?        @db.Text
  source      QuestionSource @default(MANUAL)
  aiPrompt    String?        @db.Text // For AI-generated questions
  imageUrl    String? // Optional question image

  // Relations
  school                 School                  @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  subject                Subject                 @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  generatedExamQuestions GeneratedExamQuestion[]
  analytics              QuestionAnalytics?

  // Marking system relations
  rubrics        Rubric[]
  studentAnswers StudentAnswer[]
  markingResults MarkingResult[]

  // Quiz game relations
  quizGameQuestions QuizGameQuestion[]

  createdBy String // Teacher ID
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([schoolId, subjectId])
  @@index([schoolId, difficulty, bloomLevel])
  @@index([schoolId, questionType])
  @@index([schoolId, createdBy])
  @@index([schoolId, source])
  @@map("question_bank")
}

// Exam Templates - Reusable exam blueprints
model ExamTemplate {
  id          String  @id @default(cuid())
  schoolId    String
  name        String
  description String? @db.Text
  subjectId   String
  duration    Int // Minutes
  totalMarks  Decimal @db.Decimal(6, 2)

  // Distribution rules (JSON structure)
  // Example: {
  //   "MULTIPLE_CHOICE": {"EASY": 5, "MEDIUM": 3, "HARD": 2},
  //   "SHORT_ANSWER": {"MEDIUM": 3}
  // }
  distribution Json

  // Optional Bloom's distribution
  // Example: {"REMEMBER": 4, "UNDERSTAND": 3, "APPLY": 3}
  bloomDistribution Json?

  // Relations
  school         School          @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  subject        Subject         @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  generatedExams GeneratedExam[]

  createdBy String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([schoolId, subjectId])
  @@index([schoolId, isActive])
  @@index([schoolId, createdBy])
  @@map("exam_templates")
}

// Generated Exams - Links templates to actual exams
model GeneratedExam {
  id             String  @id @default(cuid())
  schoolId       String
  examId         String // Links to Exam model
  templateId     String?
  isRandomized   Boolean @default(false)
  seed           String? // For reproducible randomization
  totalQuestions Int     @default(0)

  // Metadata
  generationNotes String? @db.Text

  // Relations
  school    School                  @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  exam      Exam                    @relation(fields: [examId], references: [id], onDelete: Cascade)
  template  ExamTemplate?           @relation(fields: [templateId], references: [id], onDelete: SetNull)
  questions GeneratedExamQuestion[]

  generatedBy String
  createdAt   DateTime @default(now())

  @@unique([examId]) // One generated exam per exam
  @@index([schoolId, examId])
  @@index([schoolId, templateId])
  @@index([schoolId, generatedBy])
  @@map("generated_exams")
}

// Questions in a Generated Exam
model GeneratedExamQuestion {
  id              String  @id @default(cuid())
  schoolId        String
  generatedExamId String
  questionId      String
  order           Int
  points          Decimal @db.Decimal(5, 2)

  // Optional per-question overrides
  customInstructions String? @db.Text

  // Relations
  school        School        @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  generatedExam GeneratedExam @relation(fields: [generatedExamId], references: [id], onDelete: Cascade)
  question      QuestionBank  @relation(fields: [questionId], references: [id], onDelete: Restrict)

  @@unique([generatedExamId, order])
  @@unique([generatedExamId, questionId]) // No duplicate questions in same exam
  @@index([schoolId, generatedExamId])
  @@index([schoolId, questionId])
  @@map("generated_exam_questions")
}

// Question Analytics - Track question performance
model QuestionAnalytics {
  id         String @id @default(cuid())
  schoolId   String
  questionId String @unique

  timesUsed    Int      @default(0)
  avgScore     Decimal? @db.Decimal(5, 2)
  successRate  Float? // Percentage 0-100
  avgTimeSpent Float? // Average time in minutes

  // Difficulty analysis
  perceivedDifficulty DifficultyLevel? // Based on student performance

  // Relations
  school   School       @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  question QuestionBank @relation(fields: [questionId], references: [id], onDelete: Cascade)

  lastUsed  DateTime?
  updatedAt DateTime  @updatedAt

  @@index([schoolId, questionId])
  @@index([schoolId, timesUsed])
  @@index([schoolId, successRate])
  @@map("question_analytics")
}
