// Auto-Marking and Exam Grading System
// Uses QuestionBank, QuestionType, DifficultyLevel, BloomLevel from exams.prisma
// Adds automated marking capabilities with AI and OCR support

// Grading Methods
enum GradingMethod {
  AUTO // Fully automated (MCQ, T/F, Fill Blank)
  AI_ASSISTED // AI grading with teacher review (Short Answer, Essay)
  MANUAL // Teacher grades manually
}

// Submission Types
enum SubmissionType {
  DIGITAL // Answered directly in platform
  UPLOAD // Uploaded file (PDF/image)
  OCR // Scanned and processed via OCR
}

// Marking Status
enum MarkingStatus {
  NOT_STARTED // No grading yet
  IN_PROGRESS // Partially graded
  AUTO_GRADED // Auto-graded, pending review
  AI_GRADED // AI-graded, pending review
  REVIEWED // Teacher reviewed
  COMPLETED // Finalized
}

// Note: QuestionBank and related enums are defined in exams.prisma

// Grading Rubric for subjective questions (links to QuestionBank from exams.prisma)
model Rubric {
  id          String  @id @default(cuid())
  schoolId    String
  questionId  String  @unique // Links to QuestionBank.id from exams.prisma
  title       String
  description String? @db.Text
  totalPoints Decimal @db.Decimal(5, 2)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school   School            @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  question QuestionBank      @relation(fields: [questionId], references: [id], onDelete: Cascade)
  criteria RubricCriterion[]

  @@index([schoolId, questionId])
  @@map("rubrics")
}

// Individual rubric criteria
model RubricCriterion {
  id          String  @id @default(cuid())
  schoolId    String
  rubricId    String
  criterion   String  @db.Text // What to evaluate
  description String? @db.Text // Detailed description
  maxPoints   Decimal @db.Decimal(5, 2)
  order       Int     @default(0)

  school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  rubric Rubric @relation(fields: [rubricId], references: [id], onDelete: Cascade)

  @@index([schoolId, rubricId])
  @@map("rubric_criteria")
}

// Student answers/responses for exam questions
model StudentAnswer {
  id             String         @id @default(cuid())
  schoolId       String
  examId         String // Links to Exam.id from exams.prisma
  questionId     String // Links to QuestionBank.id from exams.prisma
  studentId      String
  submissionType SubmissionType

  // Answer content
  answerText        String?  @db.Text // Digital answer
  selectedOptionIds String[] // For MCQ (array of indices)
  uploadUrl         String? // Uploaded file URL
  ocrText           String?  @db.Text // Extracted text from OCR
  ocrConfidence     Float? // OCR accuracy confidence (0-1)

  // Timestamps
  submittedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  school        School         @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  exam          Exam           @relation(fields: [examId], references: [id], onDelete: Cascade)
  question      QuestionBank   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  student       Student        @relation(fields: [studentId], references: [id], onDelete: Cascade)
  markingResult MarkingResult?

  @@unique([examId, questionId, studentId])
  @@index([schoolId, examId])
  @@index([schoolId, studentId])
  @@index([schoolId, questionId])
  @@index([schoolId, examId, submittedAt])
  @@index([schoolId, submissionType])
  @@map("student_answers")
}

// Marking/Grading results
model MarkingResult {
  id              String @id @default(cuid())
  schoolId        String
  studentAnswerId String @unique
  examId          String
  questionId      String // Links to QuestionBank.id
  studentId       String

  // Grading details
  gradingMethod GradingMethod
  status        MarkingStatus @default(NOT_STARTED)
  pointsAwarded Decimal       @db.Decimal(5, 2)
  maxPoints     Decimal       @db.Decimal(5, 2)

  // AI grading
  aiScore      Decimal? @db.Decimal(5, 2)
  aiConfidence Float? // AI confidence score (0-1)
  aiReasoning  String?  @db.Text // AI explanation

  // Teacher feedback
  feedback String?   @db.Text
  gradedBy String? // Teacher ID
  gradedAt DateTime?

  // Flags
  needsReview   Boolean @default(false)
  wasOverridden Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school        School          @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  studentAnswer StudentAnswer   @relation(fields: [studentAnswerId], references: [id], onDelete: Cascade)
  exam          Exam            @relation(fields: [examId], references: [id], onDelete: Cascade)
  question      QuestionBank    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  student       Student         @relation(fields: [studentId], references: [id], onDelete: Cascade)
  overrides     GradeOverride[]

  @@index([schoolId, examId])
  @@index([schoolId, studentId])
  @@index([schoolId, status])
  @@index([schoolId, gradingMethod])
  @@index([schoolId, needsReview])
  @@index([schoolId, gradedBy])
  @@index([schoolId, examId, status])
  @@index([schoolId, status, needsReview])
  @@map("marking_results")
}

// Manual grade overrides/adjustments
model GradeOverride {
  id              String @id @default(cuid())
  schoolId        String
  markingResultId String

  previousScore Decimal  @db.Decimal(5, 2)
  newScore      Decimal  @db.Decimal(5, 2)
  reason        String   @db.Text
  overriddenBy  String // Teacher ID
  overriddenAt  DateTime @default(now())

  school        School        @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  markingResult MarkingResult @relation(fields: [markingResultId], references: [id], onDelete: Cascade)

  @@index([schoolId, markingResultId])
  @@index([schoolId, overriddenBy])
  @@map("grade_overrides")
}
