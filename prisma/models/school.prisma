// School and School Structure Models

model School {
  id          String  @id @default(cuid())
  name        String
  domain      String  @unique // e.g., "hogwarts" for hogwarts.schoolapp.com
  logoUrl     String?
  address     String?
  phoneNumber String?
  email       String?
  website     String?
  timezone    String  @default("Africa/Khartoum")
  // locale      String  @default("ar") // TODO: Add migration for this field

  // Subscription/billing info (high-level; detailed state in Subscription)
  planType    String  @default("basic") // basic, premium, enterprise
  maxStudents Int     @default(100)
  maxTeachers Int     @default(10)
  isActive    Boolean @default(true)

  // Onboarding status (uncomment after migration)
  // onboardingCompletedAt DateTime?
  // operationalStatus     String? // existing school, new school
  // safetyFeatures        String[] @default([])

  // School relationships
  users                   User[]
  schoolYears             SchoolYear[]
  periods                 Period[]
  terms                   Term[]
  departments             Department[]
  yearLevels              YearLevel[]
  students                Student[]
  teachers                Teacher[]
  teacherQualifications   TeacherQualification[]
  teacherExperiences      TeacherExperience[]
  teacherSubjectExpertise TeacherSubjectExpertise[]
  workloadConfigs         WorkloadConfig[]
  guardians               Guardian[]
  classrooms              Classroom[]
  classroomTypes          ClassroomType[]
  teacherDepartments      TeacherDepartment[]
  teacherPhoneNumbers     TeacherPhoneNumber[]
  guardianTypes           GuardianType[]
  studentGuardians        StudentGuardian[]
  guardianPhoneNumbers    GuardianPhoneNumber[]
  studentYearLevels       StudentYearLevel[]
  subjects                Subject[]
  classes                 Class[]
  studentClasses          StudentClass[]
  classTeachers           ClassTeacher[]
  scoreRanges             ScoreRange[]
  assignments             Assignment[]
  assignmentSubmissions   AssignmentSubmission[]
  attendances             Attendance[]
  announcements           Announcement[]
  domainRequests          DomainRequest[]
  subscriptions           Subscription[]
  invoices                Invoice[]
  // Standalone invoice block relations
  userInvoices            UserInvoice[]
  userInvoiceItems        UserInvoiceItem[]
  userInvoiceAddresses    UserInvoiceAddress[]
  userInvoiceSettings     UserInvoiceSettings[]
  userInvoiceSignatures   UserInvoiceSignature[]
  timetables              Timetable[]
  schoolWeekConfigs       SchoolWeekConfig[]
  // Legal relations
  legalConsents           LegalConsent[]
  legalDocuments          LegalDocument[]
  complianceLogs          ComplianceLog[]
  // Subscription relations
  discounts               Discount[]
  appliedDiscounts        AppliedDiscount[]
  // Branding and visibility
  branding                SchoolBranding?
  // Examination relations
  exams                   Exam[]
  examResults             ExamResult[]
  gradeBoundaries         GradeBoundary[]
  // Gradebook relations
  results                 Result[]
  reportCards             ReportCard[]
  reportCardGrades        ReportCardGrade[]

  // Stream (LMS) relations
  streamCourses      StreamCourse[]
  streamCategories   StreamCategory[]
  streamEnrollments  StreamEnrollment[]
  streamCertificates StreamCertificate[]

  // Library relations
  books         Book[]
  borrowRecords BorrowRecord[]

  // Lesson relations
  lessons Lesson[]

  // Student management relations
  studentBatches      StudentBatch[]
  batches             Batch[]
  studentDocuments    StudentDocument[]
  healthRecords       HealthRecord[]
  achievements        Achievement[]
  disciplinaryRecords DisciplinaryRecord[]
  libraryRecords      LibraryRecord[]
  feeRecords          FeeRecord[]

  // Banking relations
  bankAccounts    BankAccount[]
  transactions    Transaction[]
  transfers       Transfer[]
  plaidItems      PlaidItem[]
  dwollaCustomers DwollaCustomer[]

  // Admission relations
  admissionCampaigns AdmissionCampaign[]
  applications       Application[]
  communications     Communication[]

  // Fees relations
  feeStructures           FeeStructure[]
  feeAssignments          FeeAssignment[]
  payments                Payment[]
  refunds                 Refund[]
  scholarships            Scholarship[]
  scholarshipApplications ScholarshipApplication[]
  fines                   Fine[]

  // Geo-Attendance relations
  geoFences           GeoFence[]
  locationTraces      LocationTrace[]
  geoAttendanceEvents GeoAttendanceEvent[]

  // Billing relations
  billingPaymentMethods BillingPaymentMethod[]
  billingHistory        BillingHistory[]
  usageMetrics          UsageMetrics[]

  // Receipt tracking relations
  expenseReceipts    ExpenseReceipt[]
  creditNotes        CreditNote[]
  billingPreferences BillingPreferences?

  // Enhanced Attendance relations
  studentIdentifiers StudentIdentifier[]
  attendanceDevices  AttendanceDevice[]
  attendanceSessions AttendanceSession[]
  attendanceEvents   AttendanceEvent[]
  qrCodeSessions     QRCodeSession[]
  biometricTemplates BiometricTemplate[]
  accessCards        AccessCard[]
  bluetoothBeacons   BluetoothBeacon[]
  attendancePolicies AttendancePolicy[]
  attendanceReports  AttendanceReport[]

  // Quiz relations
  quizGames          QuizGame[]
  quizGameQuestions  QuizGameQuestion[]
  quizCategories     QuizCategory[]
  quizCategoryStats  QuizCategoryStats[]
  quizAchievements   QuizAchievement[]
  quizLeaderboards   QuizLeaderboard[]

  // Finance Module Relations (NEW)
  chartOfAccounts     ChartOfAccount[]
  fiscalYears         FiscalYear[]
  journalEntries      JournalEntry[]
  ledgerEntries       LedgerEntry[]
  accountBalances     AccountBalance[]
  bankReconciliations BankReconciliation[]
  salaryStructures    SalaryStructure[]
  salaryAllowances    SalaryAllowance[]
  salaryDeductions    SalaryDeduction[]
  payrollRuns         PayrollRun[]
  salarySlips         SalarySlip[]
  timesheetPeriods    TimesheetPeriod[]
  timesheetEntries    TimesheetEntry[]
  wallets             Wallet[]
  walletTransactions  WalletTransaction[]
  budgets             Budget[]
  budgetAllocations   BudgetAllocation[]
  expenseCategories   ExpenseCategory[]
  expenses            Expense[]
  financialReports    FinancialReport[]
  financePermissions  FinancePermission[]

  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  QuestionBank          QuestionBank[]
  ExamTemplate          ExamTemplate[]
  GeneratedExam         GeneratedExam[]
  GeneratedExamQuestion GeneratedExamQuestion[]
  QuestionAnalytics     QuestionAnalytics[]
  Rubric                Rubric[]
  RubricCriterion       RubricCriterion[]
  StudentAnswer         StudentAnswer[]
  MarkingResult         MarkingResult[]
  GradeOverride         GradeOverride[]

  @@map("schools")
}

model Subscription {
  id                   String   @id @default(cuid())
  schoolId             String
  stripeSubscriptionId String   @unique
  stripeCustomerId     String
  stripePriceId        String
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean  @default(false)
  status               String // active, past_due, canceled, etc
  tierId               String

  school           School           @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  subscriptionTier SubscriptionTier @relation(fields: [tierId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subscriptions")
}

model Invoice {
  id              String   @id @default(cuid())
  schoolId        String
  stripeInvoiceId String   @unique
  amountDue       Int
  amountPaid      Int
  currency        String
  status          String // draft, open, paid, uncollectible, void
  periodStart     DateTime
  periodEnd       DateTime

  school           School            @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  receipts         Receipt[]
  appliedDiscounts AppliedDiscount[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("invoices")
}

model SchoolYear {
  id        String   @id @default(cuid())
  schoolId  String
  yearName  String
  startDate DateTime
  endDate   DateTime

  school            School             @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  periods           Period[]
  terms             Term[]
  studentYearLevels StudentYearLevel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([schoolId, yearName]) // Unique year name per school
  @@map("school_years")
}

model Period {
  id        String   @id @default(cuid())
  schoolId  String
  yearId    String
  name      String
  startTime DateTime @db.Time()
  endTime   DateTime @db.Time()

  school         School      @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolYear     SchoolYear  @relation(fields: [yearId], references: [id], onDelete: Cascade)
  classesAsStart Class[]     @relation("ClassStartPeriod")
  classesAsEnd   Class[]     @relation("ClassEndPeriod")
  timetables     Timetable[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([schoolId, yearId, name]) // Unique period name per school year
  @@map("periods")
}

model Term {
  id         String   @id @default(cuid())
  schoolId   String
  yearId     String
  termNumber Int
  startDate  DateTime
  endDate    DateTime

  school            School             @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolYear        SchoolYear         @relation(fields: [yearId], references: [id], onDelete: Cascade)
  classes           Class[]
  timetables        Timetable[]
  schoolWeekConfigs SchoolWeekConfig[]
  reportCards       ReportCard[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([schoolId, yearId, termNumber]) // Unique term number per school year
  @@map("terms")
}

model YearLevel {
  id         String @id @default(cuid())
  schoolId   String
  levelName  String
  levelOrder Int

  school            School             @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  studentYearLevels StudentYearLevel[]
  reportCards       ReportCard[]
  batches           Batch[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([schoolId, levelName]) // Unique level name per school
  @@unique([schoolId, levelOrder]) // Unique level order per school
  @@map("year_levels")
}
