// Assessment Models (Tests and Assignments)

enum AssessmentType {
  HOMEWORK
  QUIZ
  TEST
  MIDTERM
  FINAL_EXAM
  PROJECT
  LAB_REPORT
  ESSAY
  PRESENTATION
}

enum AssessmentStatus {
  DRAFT
  PUBLISHED
  IN_PROGRESS
  COMPLETED
  GRADED
}

model Assignment {
  id           String           @id @default(cuid())
  schoolId     String
  classId      String
  title        String
  description  String?          @db.Text
  type         AssessmentType
  status       AssessmentStatus @default(DRAFT)
  totalPoints  Decimal          @db.Decimal(5, 2)
  weight       Decimal          @db.Decimal(5, 2) // Percentage weight in final grade
  dueDate      DateTime
  publishDate  DateTime?
  instructions String?          @db.Text

  school      School                 @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  class       Class                  @relation(fields: [classId], references: [id], onDelete: Cascade)
  submissions AssignmentSubmission[]
  results     Result[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("assignments")
}

enum SubmissionStatus {
  NOT_SUBMITTED
  DRAFT
  SUBMITTED
  LATE_SUBMITTED
  GRADED
  RETURNED
}

model AssignmentSubmission {
  id           String           @id @default(cuid())
  schoolId     String
  assignmentId String
  studentId    String
  status       SubmissionStatus @default(NOT_SUBMITTED)
  submittedAt  DateTime?
  content      String?          @db.Text
  attachments  String[] // Array of file URLs
  score        Decimal?         @db.Decimal(5, 2)
  feedback     String?          @db.Text
  gradedAt     DateTime?
  gradedBy     String? // Teacher ID who graded

  school     School     @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  student    Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([schoolId, assignmentId, studentId]) // Unique submission per assignment per student per school
  @@map("assignment_submissions")
}
