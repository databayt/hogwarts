// Staff Models

model Teacher {
  id           String  @id @default(cuid())
  schoolId     String
  employeeId   String? // External employee identifier
  givenName    String
  surname      String
  gender       String?
  emailAddress String

  // New profile fields
  birthDate           DateTime?
  joiningDate         DateTime?
  employmentStatus    String    @default("ACTIVE") // ACTIVE, ON_LEAVE, TERMINATED, RETIRED
  employmentType      String    @default("FULL_TIME") // FULL_TIME, PART_TIME, CONTRACT, SUBSTITUTE
  contractStartDate   DateTime?
  contractEndDate     DateTime?
  profilePhotoUrl     String?

  school             School                    @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  classes            Class[]
  teacherDepartments TeacherDepartment[]
  phoneNumbers       TeacherPhoneNumber[]
  guardianProfiles   Guardian[] // Teachers can also be guardians
  timetables         Timetable[]

  // New relations
  qualifications   TeacherQualification[]
  experiences      TeacherExperience[]
  subjectExpertise TeacherSubjectExpertise[]
  classTeachers    ClassTeacher[] // Co-teaching assignments

  // Auth relationship
  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([schoolId, emailAddress]) // Unique email per school
  @@unique([schoolId, employeeId]) // Unique employee ID per school
  @@map("teachers")
}

model Department {
  id             String @id @default(cuid())
  schoolId       String
  departmentName String

  school             School              @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  subjects           Subject[]
  teacherDepartments TeacherDepartment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([schoolId, departmentName]) // Unique department name per school
  @@map("departments")
}

model TeacherDepartment {
  id           String    @id @default(cuid())
  schoolId     String
  teacherId    String
  departmentId String
  isPrimary    Boolean   @default(false) // Primary department for the teacher
  startDate    DateTime  @default(now())
  endDate      DateTime?

  school     School     @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  teacher    Teacher    @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  department Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([schoolId, teacherId, departmentId]) // Unique teacher-department per school
  @@map("teacher_departments")
}

model TeacherPhoneNumber {
  id          String  @id @default(cuid())
  schoolId    String
  teacherId   String
  phoneNumber String
  phoneType   String  @default("mobile") // mobile, home, work, emergency
  isPrimary   Boolean @default(false)

  school  School  @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([schoolId, teacherId, phoneNumber]) // Unique phone per teacher per school
  @@map("teacher_phone_numbers")
}

// Teacher Qualifications (Degrees, Certifications, Licenses)
model TeacherQualification {
  id                String    @id @default(cuid())
  schoolId          String
  teacherId         String
  qualificationType String // DEGREE, CERTIFICATION, LICENSE
  name              String // e.g., "Bachelor of Science", "TEFL Certificate"
  institution       String? // University or issuing body
  major             String? // Field of study (for degrees)
  dateObtained      DateTime
  expiryDate        DateTime?
  licenseNumber     String?
  documentUrl       String? // Future: S3/upload integration

  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  school  School  @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([schoolId, teacherId, qualificationType, name]) // Prevent duplicate qualifications
  @@index([schoolId, teacherId])
  @@map("teacher_qualifications")
}

// Teacher Experience Records
model TeacherExperience {
  id          String    @id @default(cuid())
  schoolId    String
  teacherId   String
  institution String // Previous school/organization name
  position    String // Job title/role
  startDate   DateTime
  endDate     DateTime?
  isCurrent   Boolean   @default(false)
  description String?   @db.Text // Responsibilities, achievements

  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  school  School  @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([schoolId, teacherId])
  @@map("teacher_experiences")
}

// Teacher Subject Expertise
model TeacherSubjectExpertise {
  id             String @id @default(cuid())
  schoolId       String
  teacherId      String
  subjectId      String
  expertiseLevel String // PRIMARY, SECONDARY, CERTIFIED

  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  school  School  @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([schoolId, teacherId, subjectId]) // One expertise record per teacher-subject pair
  @@index([schoolId, teacherId])
  @@map("teacher_subject_expertise")
}

// School-level Workload Configuration
model WorkloadConfig {
  id                    String @id @default(cuid())
  schoolId              String @unique
  minPeriodsPerWeek     Int    @default(15) // Below this = underutilized
  normalPeriodsPerWeek  Int    @default(20) // Normal teaching load
  maxPeriodsPerWeek     Int    @default(25) // Recommended maximum
  overloadThreshold     Int    @default(25) // Above this = overload warning

  school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("workload_configs")
}
